import { useState, useRef } from 'react';
import { ChevronLeft, ChevronRight, ArrowRight, X } from 'lucide-react';
import { Dialog, DialogContent, DialogOverlay, DialogPortal, DialogTrigger, DialogClose } from '@radix-ui/react-dialog';
import Article from './Article';

const articleContent = `El dise√±o digital contempor√°neo est√° dejando de ser una disciplina puramente visual para convertirse en un campo h√≠brido entre programaci√≥n, teor√≠a de sistemas, f√≠sica computacional y neurociencia aplicada.\n\nEn este art√≠culo exploro c√≥mo la inteligencia artificial ‚Äîespec√≠ficamente los modelos generativos‚Äî est√° reconfigurando no solo el c√≥mo dise√±amos productos, sino qu√© significa dise√±ar en una era de algoritmos adaptativos y datos multidimensionales.\n\n1. Del dise√±o basado en intuici√≥n al dise√±o basado en sistemas din√°micos\nTradicionalmente, el dise√±o digital ha dependido de la heur√≠stica: decisiones tomadas desde la experiencia, la observaci√≥n del usuario y el lenguaje visual. Sin embargo, la incorporaci√≥n de modelos generativos como diffusion models, redes transformer y t√©cnicas de optimizaci√≥n evolutiva ha dado paso a una nueva forma de creaci√≥n:\n\n"Un sistema puede generar miles de alternativas de dise√±o, ponderadas por criterios que van desde est√©tica percibida hasta eficiencia energ√©tica."\n‚Äî A. Ramesh et al., "Zero-Shot Text-to-Image Generation," NeurIPS 2021\n\nEsto implica que el dise√±o ya no se basa en decisiones puntuales, sino en espacios de soluci√≥n, definidos por funciones matem√°ticas y restricciones l√≥gicas. En otras palabras: dise√±ar hoy puede implicar resolver un sistema din√°mico no lineal donde la experiencia de usuario es una funci√≥n multivariable.\n\n2. El rol de la f√≠sica computacional en el dise√±o de interacci√≥n\nUno de los aspectos m√°s intrigantes es el uso de modelos f√≠sicos para definir comportamientos interactivos. Las microinteracciones, transiciones de interfaz y simulaciones en productos complejos se modelan hoy mediante ecuaciones diferenciales ordinarias (ODEs) y t√©cnicas de integraci√≥n num√©rica como Runge-Kutta.\n\nPor ejemplo, en prototipos avanzados de interfaces tangibles (UI f√≠sicas), se utilizan principios de masa-resorte para simular respuesta h√°ptica:\n\nùêπ = ‚àíùëòùë•‚àíùëèùë£\nDonde k es la constante el√°stica, b el coeficiente de fricci√≥n, x el desplazamiento y v la velocidad. Este tipo de modelos se implementa hoy con facilidad usando librer√≠as como p5.js o motores como Unity3D y se eval√∫an mediante t√©cnicas de simulaci√≥n en tiempo real.\n\n3. Algoritmos generativos como co-dise√±adores\nCon la maduraci√≥n de herramientas como Figma AI, Uizard, Builder.io, e incluso el uso de modelos de lenguaje como GPT-4, el rol del dise√±ador se est√° desplazando hacia una relaci√≥n colaborativa con el algoritmo. Estos sistemas no solo ejecutan tareas, sino que proponen soluciones aut√≥nomas:\n\n"El dise√±o generativo convierte al dise√±ador en un editor, un seleccionador dentro de un espacio de posibilidades multidimensional generado por la IA."\n‚Äî J. Maeda, "Design in Tech Report," 2023\n\nEste cambio exige conocimientos t√©cnicos nuevos: desde redes neuronales hasta estad√≠stica bayesiana, pasando por teor√≠a de grafos y l√≥gica difusa.\n\n4. De lo visual a lo matem√°tico: el dise√±o como topolog√≠a funcional\nAlgunos dise√±adores ya est√°n explorando c√≥mo mapear decisiones de dise√±o a espacios matem√°ticos, lo que permite tratar productos digitales como espacios topol√≥gicos con funciones de coste, reglas de transici√≥n y geometr√≠a de estados. Por ejemplo, el flujo de un usuario a trav√©s de una aplicaci√≥n puede representarse como un grafo dirigido con pesos adaptativos, donde cada nodo corresponde a una vista, y cada arista a una transici√≥n condicionada.\n\nùê∫ = (ùëâ,ùê∏), ùë§:ùê∏‚ÜíùëÖ+\n\nEste enfoque permite optimizar flujos usando algoritmos como Dijkstra o A*, pero tambi√©n dise√±ar experiencias m√°s eficientes con aprendizaje por refuerzo, donde el sistema aprende la ruta √≥ptima para cada tipo de usuario.\n\n5. Implicaciones √©ticas y est√©ticas\nSi bien esta evoluci√≥n promete eficiencia y personalizaci√≥n, tambi√©n plantea preguntas cr√≠ticas:\n¬øD√≥nde queda la intuici√≥n humana? ¬øC√≥mo se valida la belleza cuando es generada por un modelo estad√≠stico? ¬øC√≥mo se representa la diversidad est√©tica en datasets sesgados?\n\nComo dise√±ador, no puedo evitar preguntarme si la est√©tica algor√≠tmica reemplazar√° lo artesanal o si estamos entrando en una nueva era donde ambas coexisten.\n\nConclusi√≥n\nEl dise√±o digital del futuro no es solo arte ni solo ingenier√≠a: es la s√≠ntesis de m√∫ltiples lenguajes ‚Äîvisual, computacional, f√≠sico y emocional‚Äî mediada por sistemas inteligentes. Dise√±ar con IA es, en esencia, programar la creatividad en tiempo real.\n\nReferencias\nRamesh, A., Pavlov, M., Goh, G. et al. (2021). Zero-Shot Text-to-Image Generation. NeurIPS.\nMaeda, J. (2023). Design in Tech Report.\nTversky, A., Kahneman, D. (1974). Judgment under Uncertainty: Heuristics and Biases.\nMa, Y., & Belkin, M. (2020). Neural Tangent Kernel: Convergence and Generalization in Neural Networks. ICML.`;

  const articles = [
    {
      id: 1,
    title: 'Dise√±o generativo asistido por IA: Hacia una fusi√≥n entre est√©tica, algoritmos y sistemas adaptativos',
    excerpt: 'El dise√±o digital contempor√°neo est√° dejando de ser una disciplina puramente visual para convertirse en un campo h√≠brido entre programaci√≥n, teor√≠a de sistemas, f√≠sica computacional y neurociencia aplicada.',
    date: 'Publicado el 8 de julio de 2025',
    readTime: 'Lectura de 6‚Äì7 min',
    content: articleContent
  }
];

const ArticlesSection = () => {
  const [currentSlide, setCurrentSlide] = useState(0);
  const carouselRef = useRef<HTMLDivElement>(null);

  const nextSlide = () => {
    setCurrentSlide((prev) => (prev + 1) % articles.length);
  };

  const prevSlide = () => {
    setCurrentSlide((prev) => (prev - 1 + articles.length) % articles.length);
  };

  const showNavigation = articles.length > 1;

  return (
    <section className="py-16 sm:py-24 lg:py-32 bg-background relative">
      {/* Background gradient */}
      <div className="absolute top-0 left-0 w-1/2 h-full bg-gradient-to-r from-accent/5 to-transparent"></div>
      <div className="container mx-auto px-4 sm:px-6 relative">
        {/* Section Header */}
        <div className="flex flex-col lg:flex-row lg:justify-between lg:items-end mb-12 lg:mb-16 space-y-6 lg:space-y-0">
          <div>
            <h2 className="text-section-title mb-4">
              Nuestro √∫ltimo ‚Äî<br />
              <span className="gradient-text">art√≠culo</span>
            </h2>
            <p className="text-muted-foreground text-base sm:text-lg max-w-lg">
              Insights, tendencias y conocimientos del mundo del dise√±o digital para inspirar tu pr√≥ximo proyecto.
            </p>
          </div>
          {/* Navigation Controls */}
          {showNavigation && (
            <div className="flex space-x-4 justify-center lg:justify-start">
              <button
                onClick={prevSlide}
                className="p-3 sm:p-4 rounded-full bg-card border border-border hover:bg-accent hover:border-accent transition-colors group"
              >
                <ChevronLeft className="w-5 h-5 sm:w-6 sm:h-6 group-hover:text-accent-foreground transition-colors" />
              </button>
              <button
                onClick={nextSlide}
                className="p-3 sm:p-4 rounded-full bg-card border border-border hover:bg-accent hover:border-accent transition-colors group"
              >
                <ChevronRight className="w-5 h-5 sm:w-6 sm:h-6 group-hover:text-accent-foreground transition-colors" />
          </button>
            </div>
          )}
        </div>
        {/* Carousel Container */}
        <div className="relative">
          <div
            ref={carouselRef}
            className="flex transition-transform duration-300 ease-out"
            style={{ transform: `translateX(-${currentSlide * 100}%)` }}
          >
          {articles.map((article) => (
              <div key={article.id} className="w-full flex-shrink-0 px-2 sm:px-4">
                <div className="grid lg:grid-cols-2 gap-8 lg:gap-12 items-center">
                  {/* Article Image - portada solo en desktop */}
                  <div className="order-2 lg:order-1 w-full">
                    {/* Desktop: portada en su lugar original */}
                    <div className="hidden sm:block">
                      <div className="aspect-video bg-muted/20 flex items-center justify-center overflow-hidden rounded-lg">
                        <img
                          src="/astronauta-articulo.png"
                          alt="Portada del art√≠culo"
                          className="w-full h-full object-cover"
                        />
                      </div>
                    </div>
                  </div>
                  {/* Article Details */}
                  <div className="space-y-4 sm:space-y-6 order-1 lg:order-2 w-full">
                    {/* Mobile: portada primero dentro del bloque de detalles */}
                    <div className="block sm:hidden mb-4">
                      <div className="aspect-video bg-muted/20 flex items-center justify-center overflow-hidden rounded-lg">
                        <img
                          src="/astronauta-articulo.png"
                          alt="Portada del art√≠culo"
                          className="w-full h-full object-cover"
                        />
                </div>
              </div>
                    <div className="space-y-2">
                      {/* No category shown */}
                      <h3 className="text-card-title">{article.title}</h3>
                    </div>
              {/* Article Meta */}
              <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between text-xs sm:text-sm text-muted-foreground mb-4 space-y-2 sm:space-y-0">
                <span className="px-3 py-1 bg-accent/10 text-accent rounded-full font-medium self-start">
                        {article.date} ¬∑ {article.readTime}
                </span>
                    </div>
                    <p className="text-muted-foreground text-base sm:text-lg leading-relaxed">
                      {article.excerpt}
                    </p>
                    <div className="flex flex-col sm:flex-row sm:items-center space-y-3 sm:space-y-0 sm:space-x-6 pt-4">
                      <Dialog>
                        <DialogTrigger asChild>
                          <button className="flex items-center space-x-2 text-accent hover:text-accent/80 transition-colors font-medium">
                            <span>Leer m√°s</span>
                            <ArrowRight className="w-4 h-4 group-hover:translate-x-1 transition-transform" />
                          </button>
                        </DialogTrigger>
                        <DialogPortal>
                          <DialogOverlay className="fixed inset-0 bg-black/60 backdrop-blur-sm z-50 animate-fade-in" />
                          <DialogContent className="fixed left-1/2 top-1/2 max-h-[70vh] w-full max-w-2xl sm:max-w-3xl -translate-x-1/2 -translate-y-1/2 rounded-2xl bg-background p-0 sm:p-0 shadow-xl focus:outline-none z-50 animate-scale-in overflow-y-auto mx-2 sm:mx-0">
                            <div className="flex justify-between items-center mb-6 p-6 sm:p-10 pb-0">
                              <h2 className="text-xl font-bold leading-tight mr-4">{article.title}</h2>
                              <DialogClose asChild>
                                <button aria-label="Cerrar" className="rounded-full p-2 hover:bg-accent/10 focus:outline-none focus:ring-2 focus:ring-accent">
                                  <X className="w-6 h-6" />
                                </button>
                              </DialogClose>
                            </div>
                            <div className="p-6 sm:p-10 pt-0">
                              <Article />
                            </div>
                          </DialogContent>
                        </DialogPortal>
                      </Dialog>
                    </div>
                  </div>
                </div>
              </div>
          ))}
        </div>
        </div>
        {/* Dots Indicator */}
        {showNavigation && (
          <div className="flex justify-center space-x-3 mt-8 sm:mt-12">
            {articles.map((_, index) => (
              <button
                key={index}
                onClick={() => setCurrentSlide(index)}
                className={`w-2.5 h-2.5 sm:w-3 sm:h-3 rounded-full transition-colors ${
                  currentSlide === index ? 'bg-accent' : 'bg-muted-foreground/30'
                }`}
              />
            ))}
          </div>
        )}
      </div>
    </section>
  );
};

export default ArticlesSection;